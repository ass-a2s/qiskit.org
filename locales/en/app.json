{
  "tools": "Tools",
  "fun": "Fun",
  "joinSlack": "Join the Slack community",
  "documentation": "Documentation",
  "tutorials": "Tutorials",
  "pages": {
    "home": {
      "metaTitle": "Qiskit | Quantum Information Science Kit",
      "metaDescription": "Qiskit is an open-source software development kit (SDK) for working with OpenQASM and the IBM Q quantum processors. Create quantum computing programs, compile, and execute them online in a real quantum processors.",
      "headerTitle": "Qiskit",
      "headerSubTitle": "An open-source quantum computing framework for leveraging today's quantum processors in research, education, and business",
      "altLogo": "$t(pages.home.headerTitle) logo",
      "newsQCampTitle": "Qiskit Camp â€™19",
      "newsQCampDescription": "Announcing our first community event! Join us February 26 - March 1 for an immersive three day experience of training sessions and deep technical talks at IBM Research HQ followed by a a 24-hour hackathon at a mountain resort in Vermont.",
      "newsQCampButton": "Learn more",
      "newsVscodeTitle": "Introducing VSCode extension!",
      "newsVscodeDescription": "$t(pages.vscode.headerSubTitle)",
      "newsVscodeButton": "More information",
      "newsVideoTitle": "Getting started with Qiskit",
      "newsVideoDescription": "In this episode Doug McClure, Qiskitter at IBM, introduces us to Qiskit and its functions. You'll learn all about how to run your first quantum program on real IBM Q hardware.",
      "newsVideoButton": "Watch the video",
      "tryTitle": "Try Qiskit",
      "tryDescription": "Use our binder image to try Qiskit and learn without installing anything.",
      "tryButton": "Try it out",
      "communityTitle": "Qiskit community",
      "communityDescription": "Qiskit is driven by our avid community of Qiskitters! We are committed to our goal of bringing quantum computing to people of all backgrounds, and are always excited to hear your feedback directly from you. There are many ways to stay informed, contribute to, and collaborate on Qiskit.",
      "ibmQExperienceTitle": "Don't know quantum circuits?",
      "ibmQExperienceDescription": "Learn about basics of quantum computing and create quantum programs visually using the IBM Q Experience.",
      "ibmQExperienceButton": "Try it out",
      "ibmQExperienceAltImage": "Screenshot of the IBM Q Experience composer",
      "supportingTitle": "Supporting organizations and collaborators",
      "supportingDescription": "Our Qiskitters community come from a broad range of organizations. If you are a contributor and would like to be listed, please email qiskit@qiskit.org. Thanks and keep developing!",
      "citationTitle": "Citation",
      "citationDescription": "If you use Qiskit, please cite it as per the included",
      "bibtexLink": "BibTeX file"
    },
    "terra": {
      "metaTitle": "$t(pages.terra.headerTitle) | $t(pages.terra.headerSubTitle)",
      "metaDescription": "$t(pages.terra.headerSubTitle)",
      "headerTitle": "Qiskit Terra",
      "headerSubTitle": "A solid foundation for quantum computing",
      "altLogo": "$t(pages.terra.headerTitle) logo",
      "aboutTitle": "About",
      "aboutDescription": "Qiskit Terra provides the foundational roots for our software stack. Within Terra is a set of tools for composing quantum programs at the level of circuits and pulses, optimizing them for the constraints of a particular physical quantum processor, and managing the batched execution of experiments on remote-access backends. Terra is modularly constructed, simplifying the addition of extensions for circuit optimizations and backends. We welcome your contributions!",
      "stackTitle": "Stack",
      "installTitle": "Install",
      "pythonIsRequired": "Python >=3.5 is required",
      "exampleTitle": "Example"
    },
    "aqua": {
      "metaTitle": "$t(pages.aqua.headerTitle) | $t(pages.aqua.headerSubTitle)",
      "metaDescription": "$t(pages.aqua.headerSubTitle)",
      "headerTitle": "Qiskit Aqua",
      "headerSubTitle": "Algorithms for near-term quantum applications",
      "altLogo": "$t(pages.aqua.headerTitle) logo",
      "aboutTitle": "About",
      "aboutDescription": "Qiskit Aqua contains a library of cross-domain quantum algorithms upon which applications for near-term quantum computing can be built. Aqua is designed to be extensible, and employs a pluggable framework where quantum algorithms can easily be added. It currently allows the user to experiment on chemistry, AI, optimization and finance applications for near-term quantum computers.",
      "stackTitle": "Stack",
      "installTitle": "Install",
      "pythonIsRequired": "Python >=3.5 is required",
      "exampleTitle": "Example",
      "chemistryTitle": "Qiskit Chemistry",
      "chemistryDescription": "Qiskit Chemistry is the first end-to-end stack that enables experimenting with chemistry problems on near-term quantum computers. It translates chemistry-specific problems defined via classical drivers into inputs for Aqua algorithms. It is modular and extensible, and allows users with different levels of experience to execute chemistry experiments and contribute to the quantum computing chemistry software stack.",
      "chemistryLiHEnergyAltImage": "LiH Ground State Energy",
      "chemistryLiHDipoleAltImage": "LiH Dipole Moment",
      "pyscfIsRequired": "PySCF is required",
      "chemistryGui": "GUI",
      "chemistryGuiDescription1": "In addition to offering a programmable interface, Aqua is the only quantum computing software stack that comes with a GUI for intuitive problem configuration and execution. The Aqua GUI allows for passing an input to a quantum algorithm and executing it. The Qiskit Chemistry GUI allows the user to configure a chemistry experiment and all the various components necessary to conduct that experiment on a quantum machine.",
      "chemistryGuiDescription2": "The GUI embeds schema-based configuration-correctness enforcement to prevent the user from misconfiguring a problem.",
      "chemistryGuiDescription3": "Aqua also allows for a declarative programmatic approach. Once a problem has been configured through the GUI, the user can extract the entire configuration as a Python dictionary and execute the entire experiment programmatically with just two lines of code. The Python dictionary can be also programmatically customized for more elaborate experiments.",
      "chemistryGuiAltImage": "Qiskit Chemistry GUI"
    },
    "aer": {
      "metaTitle": "$t(pages.aer.headerTitle) | $t(pages.aer.headerSubTitle)",
      "metaDescription": "$t(pages.aer.headerSubTitle)",
      "headerTitle": "Qiskit Aer",
      "headerSubTitle": "A high performance simulator framework for quantum circuits",
      "altLogo": "$t(pages.aer.headerTitle) logo",
      "aboutTitle": "About",
      "aboutDescription": "Qiskit Aer provides a high performance simulator framework for the Qiskit software stack. It contains optimized C++ simulator backends for executing circuits compiled in Qiskit Terra, and tools for constructing highly configurable noise models for performing realistic noisy simulations of the errors that occur during execution on real devices.",
      "stackTitle": "Stack",
      "installTitle": "Install",
      "pythonIsRequired": "Python >=3.5 is required",
      "exampleTitle": "Example"
    },
    "ignis": {
      "metaTitle": "$t(pages.ignis.headerTitle) | $t(pages.ignis.headerSubTitle)",
      "metaDescription": "$t(pages.ignis.headerSubTitle)",
      "headerTitle": "Qiskit Ignis",
      "headerSubTitle": "Understanding and mitigating noise in quantum devices.",
      "altLogo": "$t(pages.ignis.headerTitle) logo",
      "aboutTitle": "About",
      "aboutDescription": "Qiskit Ignis is a framework for understanding and mitigating noise in quantum circuits and devices. Ignis provides self-contained experiments that include tools for generating the circuits that can be executed on real backends via Terra (or on simulators via Aer) and the tools for fitting the results and analysing the data. The experiments provided in Ignis are grouped into the topics of characterization, verification and mitigation. Characterization experiments, such as T1 (qubit lifetime) and T2 (qubit dephasing), are designed to measure noise parameters in the system. Verification experiments, such as randomized benchmarking and tomography, are designed to verify gate and small circuit performance. Mitigation experiments run calibration circuits that are analysed to generate mitigation routines that can be applied to arbitrary sets of results run on the same backend.",
      "stackTitle": "Stack",
      "installTitle": "Install",
      "pythonIsRequired": "Python >=3.5 is required",
      "exampleTitle": "Example"
    },
    "vscode": {
      "metaTitle": "$t(pages.vscode.headerTitle) | $t(pages.vscode.headerSubTitle)",
      "metaDescription": "$t(pages.vscode.headerSubTitle)",
      "headerTitle": "Qiskit VSCode extension",
      "headerSubTitle": "Simplifying Qiskit to make developing quantum circuits and applications faster",
      "altLogo": "$t(pages.vscode.headerTitle) logo",
      "stepOneTitle": "Get Visual Studio Code",
      "stepOneButton": "Download",
      "stepTwoTitle": "Get Qiskit VSCode extension",
      "stepTwoButton": "Install",
      "autocompleteTitle": "Autocomplete",
      "autocompleteDescription": "Remembering the proper commands or syntax for any new code base can be difficult for novice and experienced developers alike. The VSCode extension gives our users hints about possible code completions as they develop quantum circuits and applications.",
      "documentationTitle": "Documentation",
      "documentationDescription": "The VSCode extension offers dynamic contextual documentation. When hovering over code statements the editor gives the user specific documentation related to the particular Qiskit command.",
      "linterTitle": "Linter",
      "linterDescription": "The VSCode extension has a built-in capability to detect syntactic or semantic errors in the code and offer appropriate suggestions to fix it.",
      "snippetsTitle": "Snippets",
      "snippetsDescription": "Writing the same lines of code over and over can be repetitive; the VSCode extension brings code snippets to Qiskit, making it easier to add multiple lines at a time. Snippets are integrated with all elements of Qiskit and help speed up the workflow for quantum developers.",
      "integratedToolsTitle": "Integrated tools",
      "integratedToolsDescription": "Users can launch their executions of Qiskit programs from within their VSCode editor. Registered users of IBM Q have direct integration of the accessible devices and can call them through the editor. Together with contextual information, like devices statuses and run queues, this integration creates a smoother experience for Quantum developers."
    },
    "fun": {
      "metaTitle": "$t(pages.fun.headerTitle) | $t(pages.fun.headerSubTitle)",
      "metaDescription": "$t(pages.fun.headerSubTitle)",
      "headerTitle": "Qiskit Fun",
      "headerSubTitle": "Fun things about quantum computing",
      "modelQTitle": "Model Q",
      "modelQDescription": "At long last, we are please to announce the availability of the portable Model Q quantum keyboard: the ultimate companion for the serious quantum programmer.",
      "modelQButton": "Visit Model Q",
      "modelQAltImage": "Model Q hardware",
      "helloQuantumTitle": "Hello Quantum",
      "helloQuantumDescription": "You think quantum computing is hard? Explore the building blocks of quantum mechanics through puzzles.",
      "helloQuantumButton": "Visit Hello Quantum",
      "helloQuantumAltImage": "Hello Quantum logo",
      "entanglionTitle": "Entanglion",
      "entanglionDescription": "The world's first open source quantum board game. Master new galaxies in your quest to construct a quantum computer!",
      "entanglionButton": "Visit Entanglion",
      "entanglionAltImage": "Entanglion front cover"
    },
    "notFound": {
      "metaTitle": "Qiskit | Not found",
      "metaDescription": "",
      "headerTitle": "Sorry, that page doesn't exist!",
      "headerSubTitle": "Return to the home page"
    }
  }
}
